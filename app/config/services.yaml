# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: [ 'controller.service_arguments' ]

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Service\RedisClientService:
        bind:
            $redisUrl: '%env(APP_REDIS_URL)%'
    App\Service\Api\StartGameService:
        bind:
            $numberOfSidePositions: '%env(APP_MAP_SIDE_POSITIONS)%'
    App\Service\Api\MapService:
        bind:
            $expirationTtl: '%env(APP_REDIS_MAP_STATE_TTL)%'
    App\Service\Api\ShootToTargetService:
        bind:
            $numberOfSidePositions: '%env(APP_MAP_SIDE_POSITIONS)%'
            $maxHitsToFishTheGame: '%env(APP_MAP_NB_HITS_TO_FINISH)%'
    App\EventListener\SecurityListener:
        bind:
            $maxHitsToFishTheGame: '%env(APP_MAP_NB_HITS_TO_FINISH)%'
        tags:
            - { name: kernel.event_listener, event: kernel.request }
